<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 140 836 200">

  <script><![CDATA[
    const fingers = [ "outer", "pinky", "ring", "middle", "index", "inner" ];

    // Ergogen values, relative to one another, from outer/pinky to inner/index
    const ergogen_stagger = [ 0, 0.2, 0.6, 0.25, -0.25, -0.195 ];
    const ergogen_offset = [ ]; // TODO
    const ergogen_splay = [ 0, 6, 4, 0, 0, 0 ];

    // Absolute values
    const abs_stagger = [ -1.05, -0.85, -0.25, 0.00, -0.25, -0.345 ];
    const abs_offset = [ 0.32, 0.32, 0.15, 0, 0, 0 ];
    const abs_splay = [ 10, 10, 4, 0, 0, 0 ];

    let style = document.documentElement.style;
    fingers.forEach((name, i) => {
      const offset  = i - abs_offset[i];
      const right_x = 60.0 * (5 - offset);
      const left_x  = 60.0 * offset;
      const stagger = 60.0 * -abs_stagger[i];
      const splay   = abs_splay[i] * Math.PI / 180.0;
      const cos = Math.cos(splay);
      const sin = Math.sin(splay);
      const left_matrix  = `${cos}, ${-sin}, ${sin}, ${cos}, ${left_x}, ${stagger}`;
      const right_matrix = `${cos}, ${sin}, ${-sin}, ${cos}, ${right_x}, ${stagger}`;
      style.setProperty(`--left-${name}`,  left_matrix);
      style.setProperty(`--right-${name}`, right_matrix);
    });
  ]]></script>

  <style>
    /* Crow/Corbeau, 42 keys
    .row1m, .row2m { display: none; }
    */

    /* Owl/Chouette, 40 keys
    */
    .col1m, .col5m, .col6 { display: none; }

    /* Swift/Martinet, 34 keys
    .col1, .col5m, .col6,
    .col6m .row2m, .col5 .row3 { display: none; }
    */

    /* color theme */

    :root {
      color-scheme: light dark;
    }
    rect {
      fill: #f8f8f8;
      fill: #fff;
      stroke: #666;
      stroke-width: .5px;
    }
    text {
      fill: #444;
      font: normal 11px sans-serif;
      text-align: center;
      text-anchor: middle;
    }
    .dualKey {
      transform: translateY(26px);
      fill: #ddd;
    }
    @media (prefers-color-scheme: dark) {
      .dualKey { fill: #666; }
      rect     { fill: #444; }
      text     { fill: #bbb; }
    }

    /* geometry */

    #left .col6m, #left .col6 { transform: matrix(var(--left-outer));  }
    #left .col5m, #left .col5 { transform: matrix(var(--left-pinky));  }
    #left .col4m, #left .col4 { transform: matrix(var(--left-ring));   }
    #left .col3m, #left .col3 { transform: matrix(var(--left-middle)); }
    #left .col2m, #left .col2 { transform: matrix(var(--left-index));  }
    #left .col1m, #left .col1 { transform: matrix(var(--left-inner));  }

    #right .col1m, #right .col1 { transform: matrix(var(--right-inner));  }
    #right .col2m, #right .col2 { transform: matrix(var(--right-index));  }
    #right .col3m, #right .col3 { transform: matrix(var(--right-middle)); }
    #right .col4m, #right .col4 { transform: matrix(var(--right-ring));   }
    #right .col5m, #right .col5 { transform: matrix(var(--right-pinky));  }
    #right .col6m, #right .col6 { transform: matrix(var(--right-outer));  }

    .row1  { transform: translate(0px,   0px); }
    .row1m { transform: translate(0px,  20px); }
    .row2  { transform: translate(0px,  60px); }
    .row2m { transform: translate(0px,  80px); }
    .row3  { transform: translate(0px, 120px); }

    /* XXX magic numbers */

    #left  { transform: translate( 80px,  10px) rotate( 20deg); }
    #right { transform: translate(420px, 130px) rotate(-20deg); }

    .thumb.l1 { transform: translate(240px, 220px); }
    .thumb.l2 { transform: translate(315px, 222px); }
    .thumb.l3 { transform: translate(387px, 242px); }
    .thumb.l2 g { transform: rotate(15deg); }
    .thumb.l3 g { transform: rotate(30deg); }

    .thumb.r1 { transform: translate( 60px, 220px); }
    .thumb.r2 { transform: translate(-12px, 235px); }
    .thumb.r3 { transform: translate(-76px, 269px); }
    .thumb.r2 g { transform: rotate(-15deg); }
    .thumb.r3 g { transform: rotate(-30deg); }
  </style>

  <g id="left">
    <g class="col6m">
      <g class="key row1m"/>
      <g class="key row2m"/>
    </g>

    <g class="col6">
      <g class="key row1"/>
      <g class="key row2"/>
      <g class="key row3"/>
    </g>

    <g class="col5m">
      <g class="key row1m"/>
      <g class="key row2m"/>
    </g>

    <g class="col5">
      <g class="key row1"/>
      <g class="key row2"/>
      <g class="key row3"/>
    </g>

    <g class="col4">
      <g class="key row1"/>
      <g class="key row2 dual"/>
      <g class="key row3"/>
    </g>

    <g class="col3">
      <g class="key row1"/>
      <g class="key row2 dual"/>
      <g class="key row3"/>
    </g>

    <g class="col2">
      <g class="key row1"/>
      <g class="key row2 dual"/>
      <g class="key row3"/>
    </g>

    <g class="col1">
      <g class="key row1"/>
      <g class="key row2"/>
      <g class="key row3"/>
    </g>

    <g class="col1m">
      <g class="key row1m"/>
      <g class="key row2m"/>
    </g>

    <g class="thumb l1"/>
    <g class="thumb l2"/>
    <g class="thumb l3"/>
  </g>

  <g id="right">
    <g class="col1m">
      <g class="key row1m"/>
      <g class="key row2m"/>
    </g>

    <g class="col1">
      <g class="key row1"/>
      <g class="key row2"/>
      <g class="key row3"/>
    </g>

    <g class="col2">
      <g class="key row1"/>
      <g class="key row2 dual"/>
      <g class="key row3"/>
    </g>

    <g class="col3">
      <g class="key row1"/>
      <g class="key row2 dual"/>
      <g class="key row3"/>
    </g>

    <g class="col4">
      <g class="key row1"/>
      <g class="key row2 dual"/>
      <g class="key row3"/>
    </g>

    <g class="col5">
      <g class="key row1"/>
      <g class="key row2"/>
      <g class="key row3"/>
    </g>

    <g class="col5m">
      <g class="key row1m"/>
      <g class="key row2m"/>
    </g>

    <g class="col6">
      <g class="key row1"/>
      <g class="key row2"/>
      <g class="key row3"/>
    </g>

    <g class="col6m">
      <g class="key row1m"/>
      <g class="key row2m"/>
    </g>

    <g class="thumb r1"/>
    <g class="thumb r2"/>
    <g class="thumb r3"/>
  </g>

  <script><![CDATA[
    document.querySelectorAll(".key").forEach(key => {
      const dual = key.classList.contains("dual") ? `
        <rect width="26" height="26" rx="2" ry="2" class="dualKey"/>
      ` : "";
      key.innerHTML = `
        <rect width="52" height="52" rx="5" ry="5"/>${dual}
        <text x="12.8" y="20.6" class="level2"></text>
        <text x="38.0" y="43.4" class="num"></text>
        <text x="38.0" y="43.4" class="nav"></text>
      `;
    });
    document.querySelectorAll(".thumb").forEach(thumb => {
      thumb.innerHTML = `
        <g>
          <rect width="52" height="52" rx="5" ry="5"/>
          <rect width="52" height="26" rx="2" ry="2" class="dualKey"/>
        </g>
      `;
    });
  ]]></script>
</svg>
