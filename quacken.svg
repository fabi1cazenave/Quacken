<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 140 940 100">

  <style>
    /* geometry (XXX magic numbers) */
    .matrix { transform-origin: bottom left; }
    .thumb { transform-origin: left; }

    #left  { transform: translate( 20px,  0px) rotate( 10deg); }
    #right { transform: translate(860px, 17px) rotate(-10deg); }

    #left .tucked { transform: translate(226px, 160px) rotate(10deg); }
    #left .comfy  { transform: translate(64px, 2px) rotate(15deg); }
    #left .reachy { transform: translate(64px, 2px) rotate(15deg); }

    #right .tucked { transform: translate(-226px, 160px) rotate(-10deg); }
    #right .comfy  { transform: translate(-64px, 16px) rotate(-15deg); }
    #right .reachy { transform: translate(-64px, 16px) rotate(-15deg); }

    /* color theme */
    :root {
      color-scheme: light dark;
    }
    rect {
      fill: #f8f8f8;
      fill: #fff;
      stroke: #666;
      stroke-width: .5px;
    }
    text {
      fill: #444;
      font: normal 11px sans-serif;
      text-align: center;
      text-anchor: middle;
    }
    .dualKey {
      transform: translateY(26px);
      fill: #ddd;
    }
    @media (prefers-color-scheme: dark) {
      .dualKey { fill: #666; }
      rect     { fill: #444; }
      text     { fill: #bbb; }
    }
  </style>

  <script><![CDATA[// keyboard geometry -- could be hard-coded in the stylesheet
    const columns = [ "outer", "pinky", "ring", "middle", "index", "inner" ];
    const thumbs = [ "tucked", "comfy", "reachy" ]; // TODO
    const rows = [ "top", "home", "bottom" ];

    // Ergogen values, relative to one another, from outer/pinky to inner/index
    const rel_stagger = [ 0, 0.2, 0.6, 0.25, -0.25, -0.195 ];
    const rel_splay = [ 0, 0, 6, 4, 0, 0 ];

    // median keys have an additional stagger
    const alt_stagger = [ 0.305, 0.695, 0.0, 0.0, 0.0, 0.305 ];

    // TODO: choc spacing = 18*17mm, but using 60*60px for now
    const kw = 60.0;
    const kh = 60.0;

    // apply geometry
    let sheet = window.document.styleSheets[0];
    const addTransform = (selector, transform) => {
      sheet.insertRule(`${selector} { transform: ${transform} }`);
    }
    columns.forEach((name, i) => {
      const splay = rel_splay[i] * Math.PI / 180.0;
      const cos = Math.cos(splay);
      const sin = Math.sin(splay);
      const tx = kw * (sin + 1);
      const ty = kh * rel_stagger[i];
      addTransform(`#left  .${name}`, `matrix(${cos}, ${sin}, ${-sin}, ${cos}, ${tx}, ${-ty})`);
      addTransform(`#right .${name}`, `matrix(${cos}, ${-sin}, ${sin}, ${cos}, ${-tx}, ${-ty})`);
      addTransform(`.col${6 - i}m`,   `translateY(${alt_stagger[i] * kh}px)`);
    });
    rows.forEach((name, i) => {
      addTransform(`.${name}`, `translateY(${i * kh}px)`);
    });
  ]]></script>

  <script><![CDATA[// keyboard configuration
    const config = "martinet";
    const birds = {
      // hummingbird-like, 32-34 keyx
      "gorgebleue": ".col1, .col5m, .col6m, .col6",                      // bluethroat
      "martinet":   ".col1, .col5m, .col5 .bottom, .col6, .col6m .home", // swift
      "pinson":     ".col1, .col5m, .col5 .bottom, .col6, .col6m",       // oscine
      "hirondelle": ".col1, .col5, .col6m, .col6 .top, .col6 .bottom",   // sparrow
      "martin":     ".col1, .col5, .col6m, .col6",                       // kingfisher
      // classic, 36-42 keyx
      "huppe":      ".col1m, .col5m, .col6, .col6m",                     // hoopoe
      "epervier":   ".col1m, .col5m, .col6m, .col6 .top, .col6 .bottom", // sparrowhawk
      "chouette":   ".col1m, .col5m, .col6",                             // owl
      "corbeau":    ".col1m, .col5m, .col6m",                            // crow
    };
    sheet.insertRule(`${birds[config]} { display: none }`);
  ]]></script>

  <g id="left">
    <g class="outer matrix">
      <g class="col6m">
        <g class="key top"/>
        <g class="key home"/>
      </g>
      <g class="col6">
        <g class="key top"/>
        <g class="key home"/>
        <g class="key bottom"/>
      </g>

      <g class="pinky matrix">
        <g class="col5m">
          <g class="key top"/>
          <g class="key home"/>
        </g>
        <g class="col5">
          <g class="key top"/>
          <g class="key home"/>
          <g class="key bottom"/>
        </g>

        <g class="ring matrix">
          <g class="col4">
            <g class="key top"/>
            <g class="key home dual"/>
            <g class="key bottom"/>
          </g>

          <g class="middle matrix">
            <g class="col3">
              <g class="key top"/>
              <g class="key home dual"/>
              <g class="key bottom"/>
            </g>

            <g class="index matrix">
              <g class="col2">
                <g class="key top"/>
                <g class="key home dual"/>
                <g class="key bottom"/>
              </g>

              <g class="inner matrix">
                <g class="col1">
                  <g class="key top"/>
                  <g class="key home"/>
                  <g class="key bottom"/>
                </g>
                <g class="col1m">
                  <g class="key top"/>
                  <g class="key home"/>
                </g>
              </g>
            </g>
          </g>
        </g>
      </g>
    </g>

    <g class="tucked thumb">
      <g class="key"/>
      <g class="comfy thumb">
        <g class="key"/>
        <g class="reachy thumb">
          <g class="key"/>
        </g>
      </g>
    </g>
  </g>

  <g id="right">
    <g class="outer matrix">
      <g class="col6m">
        <g class="key top"/>
        <g class="key home"/>
      </g>
      <g class="col6">
        <g class="key top"/>
        <g class="key home"/>
        <g class="key bottom"/>
      </g>

      <g class="pinky matrix">
        <g class="col5m">
          <g class="key top"/>
          <g class="key home"/>
        </g>
        <g class="col5">
          <g class="key top"/>
          <g class="key home"/>
          <g class="key bottom"/>
        </g>

        <g class="ring matrix">
          <g class="col4">
            <g class="key top"/>
            <g class="key home dual"/>
            <g class="key bottom"/>
          </g>

          <g class="middle matrix">
            <g class="col3">
              <g class="key top"/>
              <g class="key home dual"/>
              <g class="key bottom"/>
            </g>

            <g class="index matrix">
              <g class="col2">
                <g class="key top"/>
                <g class="key home dual"/>
                <g class="key bottom"/>
              </g>

              <g class="inner matrix">
                <g class="col1">
                  <g class="key top"/>
                  <g class="key home"/>
                  <g class="key bottom"/>
                </g>
                <g class="col1m">
                  <g class="key top"/>
                  <g class="key home"/>
                </g>
              </g>
            </g>
          </g>
        </g>
      </g>
    </g>

    <g class="tucked thumb">
      <g class="key"/>
      <g class="comfy thumb">
        <g class="key"/>
        <g class="reachy thumb">
          <g class="key"/>
        </g>
      </g>
    </g>
  </g>

  <script><![CDATA[// keyboard layout
    document.querySelectorAll(".matrix .key").forEach(key => {
      const dual = key.classList.contains("dual") ? `
        <rect width="26" height="26" rx="2" ry="2" class="dualKey"/>
      ` : "";
      key.innerHTML = `
        <rect width="52" height="52" rx="5" ry="5"/>${dual}
        <text x="12.8" y="20.6" class="level2"></text>
        <text x="38.0" y="43.4" class="num"></text>
        <text x="38.0" y="43.4" class="nav"></text>
      `;
    });
    document.querySelectorAll(".thumb .key").forEach(key => {
      key.innerHTML = `
        <rect width="52" height="52" rx="5" ry="5"/>
        <rect width="52" height="26" rx="2" ry="2" class="dualKey"/>
      `;
    });
  ]]></script>
</svg>
